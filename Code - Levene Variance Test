import scipy.stats as stats
import matplotlib.pyplot as plt
import numpy as np

# Setting the font to Times New Roman
plt.rcParams["font.family"] = "Times New Roman"

def test_variance_difference(data1, data2, alpha=0.05):
    # Calculating basic statistics
    n1 = len(data1)
    n2 = len(data2)
    mean1 = np.mean(data1)
    mean2 = np.mean(data2)
    std_dev1 = np.std(data1, ddof=1)
    std_dev2 = np.std(data2, ddof=1)

    # Levene's test
    stat_levene, p_levene = stats.levene(data1, data2)
    
    # Formatting values for display with decimal point and 3 decimal places
    mean1_str = f"{mean1:.3f}"
    mean2_str = f"{mean2:.3f}"
    std_dev1_str = f"{std_dev1:.3f}"
    std_dev2_str = f"{std_dev2:.3f}"
    p_levene_str = f"{p_levene:.4f}"
    
    # Creating normal distributions
    x_range = np.linspace(min(min(data1), min(data2)) - 1, max(max(data1), max(data2)) + 1, 500)
    y1 = stats.norm.pdf(x_range, mean1, std_dev1)
    y2 = stats.norm.pdf(x_range, mean2, std_dev2)
    
    # Creating the plot
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.fill_between(x_range, y1, alpha=0.3, color='gray')
    ax.fill_between(x_range, y2, alpha=0.3, color='orange')
    ax.plot(x_range, y1, label=f'1X (Mean = {mean1_str}, SD = {std_dev1_str})', color='gray')
    ax.plot(x_range, y2, label=f'2X (Mean = {mean2_str}, SD = {std_dev2_str})', color='orange')

    # Adjusting the X-axis to cut exactly at y=0
    ax.spines['bottom'].set_position(('data', 0))
    ax.set_xlim([min(x_range), max(x_range)])
    
    # Adjusting the Y-axis limit to extend slightly beyond the maximum value
    y_max = max(max(y1), max(y2))  # Getting the highest curve value
    ax.set_ylim(0, y_max * 1.1)  # Multiplying by 1.1 to add extra margin on top
    
    # Removing the Y-axis label and the plot title
    ax.set_ylabel("")
    ax.set_title("")
    
    # Creating the translated legend
    legend_text = (
        "Levene's Test, "  # Adding line break for better formatting
        f"p-value = {p_levene_str}"
    )

    ax.legend(
        loc='upper left',
        title=legend_text,
        fontsize=14,
        title_fontsize=14,
        prop={'family': 'Times New Roman', 'size': 14}
    )
    
    ax.grid(True, linestyle="--", alpha=0.6)
    
    # Saving figures in PNG and TIFF formats. Before running the code, replace "variable compared" with the actual variable name!
    png_path = 'Variance_Analysis_1X_vs_2X_variable_compared.png'
    tiff_path = 'Variance_Analysis_1X_vs_2X_variable_compared.tiff'
    plt.savefig(png_path, bbox_inches='tight', dpi=900)
    plt.savefig(tiff_path, bbox_inches='tight', dpi=900, format='tiff')
    
    # Displaying the plot
    plt.show()
    
    return png_path, tiff_path

# Function to request user data for each group
def get_user_data(group):
    while True:
        try:
            data = input(f"Enter data for group {group} (comma-separated): ")
            data = [float(x.strip()) for x in data.split(',')]
            return data
        except ValueError:
            print("Error: Please enter only numbers separated by commas.")

# Requesting data for the groups
group1_data = get_user_data('1X')
group2_data = get_user_data('2X')

# Performing the variance difference test and saving the graphs
png_path, tiff_path = test_variance_difference(group1_data, group2_data)

# Displaying file paths
print(f"Graphs have been saved at: {png_path} and {tiff_path}")
